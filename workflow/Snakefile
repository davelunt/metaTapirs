# ==============================================================================
# metaTapirs
# A reproducible metabarcoding workflow for nanopre data
# ==============================================================================

configfile: "config/config.yaml"

# ------------------------------------------------------------------------------
# LIBRARY AND SAMPLE INFORMATION
# ------------------------------------------------------------------------------

import pandas as pd

libraries_df = pd.read_table(config['samples'], header = None)  # Pull in libraries and samples from tsv

# Generate library wildcards
LIBRARIES = list(libraries_df[0])  # create list from column of dataframe
LIBRARIES = list(dict.fromkeys(LIBRARIES))  # into a dictionary to remove duplicates

# Generate samples wildcards
SAMPLES = list(libraries_df[1])  # create list from column of dataframe
SAMPLES = list(dict.fromkeys(SAMPLES))  # into a dictionary to remove duplicates

# Generate list of legitimate combinations
# NB can this be replaced by zip command?
#  real_combos is really just the short path written to column 3 in some script methods
with open(config['samples']) as infile:
    real_combos = []
    for line in infile:
        real_combos.append(line.strip().replace('\t', '/'))

# ------------------------------------------------------------------------------
# CONDITIONAL RULE ALL
# this needs fixing
# why is this SAMPLES rather than SAMPLE below? Then sample=SAMPLES
# LIBRARIES too
# ------------------------------------------------------------------------------

# create a list to hold the output files expected, and then write to rule all input
analysis_output_list = list()

# check this below
blast = expand("results/blast_tax/{library}/{sample}.blast.tax.tsv", sample=SAMPLES, library=LIBRARIES),
kraken2 = expand("results/kraken2_tax/{library}/{sample}.krk.tax.tsv", sample=SAMPLES, library=LIBRARIES),


# fix this: cluster method is vsearch specific for illumina, remove
# simplify path of output files
# blast = "results/" + config['my_experiment'] + "_blast" + str(config['MLCA_identity']) + "_" + config['cluster_method'] + ".tsv",
# kraken2 = "results/" + config['my_experiment'] + "_kraken2_conf" + str(config['kraken2_confidence']).split('.')[1] + "_" + config['cluster_method'] + ".tsv"

if config["BLAST"]=true:
    analysis_output_list.append(blast)

if config["KRAKEN"]=true:
    analysis_output_list.append(kraken2)

rule all:
    input:
        analysis_output_list

# ------------------------------------------------------------------------------
# INCLUDE CONDITIONAL RULE FILES
# ------------------------------------------------------------------------------

include: "rules/blast.smk" if config["BLAST"]=true
include: "rules/kraken2.smk" if config["KRAKEN"]=true
include: "rules/lca.smk" if config["MLCA"]=true
